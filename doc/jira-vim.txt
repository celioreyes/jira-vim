jira-vim.txt    For Vim version 8.0     Last Change: 2019 June 19

*jira-vim* *jiravim*

         _____________                     ___    ______            ~
         ______  /__(_)____________ _      __ |  / /__(_)______ ___ ~
         ___ _  /__  /__  ___/  __ `/________ | / /__  /__  __ `__ \~
        / /_/ / _  / _  /   / /_/ /_/_____/_ |/ / _  / _  / / / / / ~
        \____/  /_/  /_/    \__,_/        _____/  /_/  /_/ /_/ /_/  ~

================================================================================
CONTENTS                                                        *jiravim-contents* 

    01. Introduction .......................................... |jiravim-intro|
    02. Setup ................................................. |jiravim-setup|
    03. Commands ........................................... |jiravim-commands|

================================================================================
INTRODUCTION                                                    *jiravim-intro* 

jira-vim is a way to view your JIRA setup without the bloat of the JIRA UI.

Imagine browsing Jira on your computer. All those buttons, animations, and fancy
UI magic are really slowing down your computer that you don't really need. It's
not improving your productivity, on the contrary it makes you wait to load
features you don't need. So I created this: an attempt at de-bloating Jira by
getting rid of the UI and using the standard Vim environment that we know and
love to display data that we obtain from the API. 

================================================================================
SETUP                                                              *jiravim-setup*

(I'm going to simplify this process in the near future)

Step 0: Make sure that you have python3 installed. This varies system to system,
but the python3 executable is usually in the `python3` command, although it's
also sometimes in the default `python` command. Check with `python --version` or
`python3 --version`

Step 1: Make sure you compiled vim with `python3` support. This can be checked with >
    echo has('python3')
If if returns 0, you might have to recompile vim with python3 support. This
stackoverflow post seems like a pretty detailed explanation:
https://stackoverflow.com/questions/30444890/vim-use-python3-interpreter-in-python-mode

Step 2: Install pip dependencies. Similarly to the situation in Step 0, the pip
binary that install dependencies for python3 can be in either `pip` or `pip3`
executables. Check by running it with the `--version` option to make sure it's
compiled for python3. Then run `pip3 install --user -r requirements.txt` from
the root directory of the project.

Step 3: Install Tabular. Use your favorite plugin manager to install the
Tabular plugin located at https://github.com/godlygeek/tabular. For Vim-Plug,
put >
    Plug 'godlygeek/tabular'
into your `.vimrc`

Step 4: Obtain your credentials. Let the following variables either in your
`.vimrc` or in the `plugin/credentials.vim` file. For example, the following
configuration   >
    let jiraVimDomainName = "antarctica"
    let jiraVimEmail = "joethepenguin@antarctica.org"
    let jiraVimToken = "1234567890abc..."
would correspond to a user whose email is "joethepenguin@antarctica.org" and the
website of his jira instance is "https://antarctica.atlassian.net". The Token is
generated by atlassian, and here is a link describing how to get one:
https://confluence.atlassian.com/cloud/api-tokens-938839638.html

That should be it! 

================================================================================
COMMANDS                                                        *jiravim-commands* 

Here is the list of commands that are available to the user:

--------------------------------------------------------------------------------
                                            *jiravim-boardopen*  *:JiraVimBoardOpen*
:JiraVimBoardOpen {name} 
    This opens the board {name} in a new split. Split occurrs with the help of
    the `sbuffer` command, so it obeys any directives you set in your vimrc.

                                    *jiravim-boardopennosp* *:JiraVimBoardOpenNosp*
:JiraVimBoardOpenNosp {name}
    This opens the board {name} in the current window. Will give you an error if
    your current buffer has unsaved changes.

 vim:tw=80:ts=8:ft=help
